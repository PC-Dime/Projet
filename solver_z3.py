#This file was automatically generated by function Bottom->Up
#Caution Any changes made to this file will be erased

#!/usr/bin/python3

from tenet_func import *
from time import *
from z3 import *

def ddebug(liste, nbAppel):
	s = Solver()
	set_option(rational_to_decimal = True)
	set_option(precision = 17)

	x_0_A_0_P_0 = 	Real('x_0_A_0_P_0')
	x_1_A_0_P_0 = 	Real('x_1_A_0_P_0')
	x_2_A_0_P_0 = 	Real('x_2_A_0_P_0')
	x_3_A_0_P_0 = 	Real('x_3_A_0_P_0')
	x_4_A_0_P_0 = 	Real('x_4_A_0_P_0')
	x_5_A_0_P_0 = 	Real('x_5_A_0_P_0')
	x_6_A_0_P_0 = 	Real('x_6_A_0_P_0')
	x_7_A_0_P_0 = 	Real('x_7_A_0_P_0')
	x_8_A_0_P_0 = 	Real('x_8_A_0_P_0')
	x_9_A_0_P_0 = 	Real('x_9_A_0_P_0')
	x_10_A_0_P_0 = 	Real('x_10_A_0_P_0')
	x_11_A_0_P_0 = 	Real('x_11_A_0_P_0')
	x_12_A_0_P_0 = 	Real('x_12_A_0_P_0')
	x_13_A_0_P_0 = 	Real('x_13_A_0_P_0')
	x_14_A_0_P_0 = 	Real('x_14_A_0_P_0')
	x_15_A_0_P_0 = 	Real('x_15_A_0_P_0')
	x_16_A_0_P_0 = 	Real('x_16_A_0_P_0')
	x_17_A_0_P_0 = 	Real('x_17_A_0_P_0')
	x_18_A_0_P_0 = 	Real('x_18_A_0_P_0')
	x_19_A_0_P_0 = 	Real('x_19_A_0_P_0')
	x_20_A_0_P_0 = 	Real('x_20_A_0_P_0')
	x_21_A_0_P_0 = 	Real('x_21_A_0_P_0')
	x_22_A_0_P_0 = 	Real('x_22_A_0_P_0')
	x_23_A_0_P_0 = 	Real('x_23_A_0_P_0')
	x_24_A_0_P_0 = 	Real('x_24_A_0_P_0')
	x_25_A_0_P_0 = 	Real('x_25_A_0_P_0')
	x_26_A_0_P_0 = 	Real('x_26_A_0_P_0')
	x_27_A_0_P_0 = 	Real('x_27_A_0_P_0')
	x_28_A_0_P_0 = 	Real('x_28_A_0_P_0')
	x_29_A_0_P_0 = 	Real('x_29_A_0_P_0')
	x_30_A_0_P_0 = 	Real('x_30_A_0_P_0')
	x_31_A_0_P_0 = 	Real('x_31_A_0_P_0')
	x_32_A_0_P_0 = 	Real('x_32_A_0_P_0')
	x_33_A_0_P_0 = 	Real('x_33_A_0_P_0')
	x_34_A_0_P_0 = 	Real('x_34_A_0_P_0')
	x_35_A_0_P_0 = 	Real('x_35_A_0_P_0')
	x_36_A_0_P_0 = 	Real('x_36_A_0_P_0')
	x_37_A_0_P_0 = 	Real('x_37_A_0_P_0')
	x_38_A_0_P_0 = 	Real('x_38_A_0_P_0')
	x_39_A_0_P_0 = 	Real('x_39_A_0_P_0')
	x_40_A_0_P_0 = 	Real('x_40_A_0_P_0')
	x_41_A_0_P_0 = 	Real('x_41_A_0_P_0')
	x_42_A_0_P_0 = 	Real('x_42_A_0_P_0')
	x_43_A_0_P_0 = 	Real('x_43_A_0_P_0')
	x_44_A_0_P_0 = 	Real('x_44_A_0_P_0')
	x_45_A_0_P_0 = 	Real('x_45_A_0_P_0')
	x_46_A_0_P_0 = 	Real('x_46_A_0_P_0')
	x_47_A_0_P_0 = 	Real('x_47_A_0_P_0')
	x_48_A_0_P_0 = 	Real('x_48_A_0_P_0')
	x_49_A_0_P_0 = 	Real('x_49_A_0_P_0')
	x_50_A_0_P_0 = 	Real('x_50_A_0_P_0')
	x_51_A_0_P_0 = 	Real('x_51_A_0_P_0')
	x_52_A_0_P_0 = 	Real('x_52_A_0_P_0')
	x_53_A_0_P_0 = 	Real('x_53_A_0_P_0')
	x_54_A_0_P_0 = 	Real('x_54_A_0_P_0')
	x_55_A_0_P_0 = 	Real('x_55_A_0_P_0')
	x_56_A_0_P_0 = 	Real('x_56_A_0_P_0')
	x_57_A_0_P_0 = 	Real('x_57_A_0_P_0')
	x_58_A_0_P_0 = 	Real('x_58_A_0_P_0')
	x_59_A_0_P_0 = 	Real('x_59_A_0_P_0')
	x_60_A_0_P_0 = 	Real('x_60_A_0_P_0')
	x_61_A_0_P_0 = 	Real('x_61_A_0_P_0')
	x_62_A_0_P_0 = 	Real('x_62_A_0_P_0')
	x_63_A_0_P_0 = 	Real('x_63_A_0_P_0')
	x_64_A_0_P_0 = 	Real('x_64_A_0_P_0')
	x_65_A_0_P_0 = 	Real('x_65_A_0_P_0')
	x_66_A_0_P_0 = 	Real('x_66_A_0_P_0')
	x_67_A_0_P_0 = 	Real('x_67_A_0_P_0')
	x_68_A_0_P_0 = 	Real('x_68_A_0_P_0')
	x_69_A_0_P_0 = 	Real('x_69_A_0_P_0')
	x_70_A_0_P_0 = 	Real('x_70_A_0_P_0')
	x_71_A_0_P_0 = 	Real('x_71_A_0_P_0')
	x_72_A_0_P_0 = 	Real('x_72_A_0_P_0')
	x_73_A_0_P_0 = 	Real('x_73_A_0_P_0')

	mantisse = 2**-53
	end = 1
	i = 1
	eps = 1
	t0 = time()
	s.add (x_11_A_0_P_0 == 1)
	s.add (x_10_A_0_P_0 == -1)
	s.add (x_9_A_0_P_0 == -1)
	x_8_A_1_P_0 = Real('x_8_A_1_P_0')
	s.add (x_8_A_1_P_0 == 0.3333333333333335)
	eps_0 = Real('eps_0')
	s.add (x_8_A_1_P_0 == (x_73_A_0_P_0 * x_8_A_1_P_0) * (1 + eps_0), Abs(eps_0) <= mantisse)
	#0.33333333333333354 = 1.0 * 0.33333333333333354
	x_11_A_1_P_0 = Real('x_11_A_1_P_0')
	s.add (x_11_A_1_P_0 == 0.3333333333333335)
	eps_1 = Real('eps_1')
	s.add (x_11_A_1_P_0 == (x_72_A_0_P_0 * x_8_A_1_P_0) * (1 + eps_1), Abs(eps_1) <= mantisse)
	#0.33333333333333354 = 1.0 * 0.33333333333333354
	x_4_A_1_P_0 = Real('x_4_A_1_P_0')
	s.add (x_4_A_1_P_0 == 1.5)
	eps_2 = Real('eps_2')
	s.add (x_4_A_1_P_0 == (x_71_A_0_P_0 * x_4_A_1_P_0) * (1 + eps_2), Abs(eps_2) <= mantisse)
	#1.5 = 1.0 * 1.5
	x_10_A_1_P_0 = Real('x_10_A_1_P_0')
	s.add (x_10_A_1_P_0 == -1.5000000000000009)
	eps_3 = Real('eps_3')
	s.add (x_10_A_1_P_0 == (x_70_A_0_P_0 * x_4_A_1_P_0) * (1 + eps_3), Abs(eps_3) <= mantisse)
	#-1.5000000000000009 = -1.0000000000000007 * 1.5
	x_0_A_1_P_0 = Real('x_0_A_1_P_0')
	s.add (x_0_A_1_P_0 == 2.0)
	eps_4 = Real('eps_4')
	s.add (x_0_A_1_P_0 == (x_69_A_0_P_0 * x_0_A_1_P_0) * (1 + eps_4), Abs(eps_4) <= mantisse)
	#1.9999999999999998 = 1.0 * 1.9999999999999998
	x_9_A_1_P_0 = Real('x_9_A_1_P_0')
	s.add (x_9_A_1_P_0 == -2.0)
	eps_5 = Real('eps_5')
	s.add (x_9_A_1_P_0 == (x_68_A_0_P_0 * x_0_A_1_P_0) * (1 + eps_5), Abs(eps_5) <= mantisse)
	#-1.9999999999999998 = -1.0 * 1.9999999999999998
	x_5_A_1_P_0 = Real('x_5_A_1_P_0')
	s.add (x_5_A_1_P_0 == 6.5)
	eps_6 = Real('eps_6')
	s.add (x_5_A_1_P_0 == (x_67_A_0_P_0 + x_66_A_0_P_0) * (1 + eps_6), Abs(eps_6) <= mantisse)
	#Cancellation
	#6.5 = -8.881784197001252e-16 + 6.500000000000001
	eps_7 = Real('eps_7')
	s.add (x_12_A_0_P_0 == (x_66_A_0_P_0 / x_8_A_1_P_0) * (1 + eps_7), Abs(eps_7) <= mantisse)
	#19.49999999999999 = 6.500000000000001 / 0.33333333333333354
	x_4_A_2_P_0 = Real('x_4_A_2_P_0')
	s.add (x_4_A_2_P_0 == 1.5)
	eps_8 = Real('eps_8')
	s.add (x_4_A_2_P_0 == (x_65_A_0_P_0 + x_64_A_0_P_0) * (1 + eps_8), Abs(eps_8) <= mantisse)
	#1.5 = 1.5 + 0.0
	eps_9 = Real('eps_9')
	s.add (x_12_A_0_P_0 == (x_64_A_0_P_0 / x_7_A_0_P_0) * (1 + eps_9), Abs(eps_9) <= mantisse)
	#19.499999999999993 = 0.0 / 0.0
	x_3_A_1_P_0 = Real('x_3_A_1_P_0')
	s.add (x_3_A_1_P_0 == 0.0)
	eps_10 = Real('eps_10')
	s.add (x_3_A_1_P_0 == (x_63_A_0_P_0 + x_62_A_0_P_0) * (1 + eps_10), Abs(eps_10) <= mantisse)
	#0.0 = 0.0 + 0.0
	eps_11 = Real('eps_11')
	s.add (x_12_A_0_P_0 == (x_62_A_0_P_0 / x_6_A_0_P_0) * (1 + eps_11), Abs(eps_11) <= mantisse)
	#19.499999999999993 = 0.0 / 0.0
	x_10_A_2_P_0 = Real('x_10_A_2_P_0')
	s.add (x_10_A_2_P_0 == 5.0)
	eps_12 = Real('eps_12')
	s.add (x_10_A_2_P_0 == (x_61_A_0_P_0 + x_60_A_0_P_0) * (1 + eps_12), Abs(eps_12) <= mantisse)
	#5.0 = -1.5000000000000009 + 6.500000000000001
	eps_13 = Real('eps_13')
	s.add (x_12_A_0_P_0 == (x_60_A_0_P_0 / x_11_A_1_P_0) * (1 + eps_13), Abs(eps_13) <= mantisse)
	#19.49999999999999 = 6.500000000000001 / 0.33333333333333354
	x_12_A_1_P_0 = Real('x_12_A_1_P_0')
	s.add (x_12_A_1_P_0 == 21.99999999999999)
	eps_14 = Real('eps_14')
	s.add (x_5_A_1_P_0 == (x_59_A_0_P_0 * x_8_A_1_P_0) * (1 + eps_14), Abs(eps_14) <= mantisse)
	#6.500000000000002 = 19.499999999999993 * 0.33333333333333354
	x_2_A_1_P_0 = Real('x_2_A_1_P_0')
	s.add (x_2_A_1_P_0 == 7.333333333333333)
	eps_15 = Real('eps_15')
	s.add (x_2_A_1_P_0 == (x_58_A_0_P_0 + x_57_A_0_P_0) * (1 + eps_15), Abs(eps_15) <= mantisse)
	#7.333333333333333 = 0.0 + 7.333333333333333
	eps_16 = Real('eps_16')
	s.add (x_12_A_1_P_0 == (x_57_A_0_P_0 / x_8_A_1_P_0) * (1 + eps_16), Abs(eps_16) <= mantisse)
	#21.999999999999986 = 7.333333333333333 / 0.33333333333333354
	x_1_A_1_P_0 = Real('x_1_A_1_P_0')
	s.add (x_1_A_1_P_0 == 0.0)
	eps_17 = Real('eps_17')
	s.add (x_1_A_1_P_0 == (x_56_A_0_P_0 + x_55_A_0_P_0) * (1 + eps_17), Abs(eps_17) <= mantisse)
	#Cancellation
	#0.0 = 0.0 + 0.0
	eps_18 = Real('eps_18')
	s.add (x_12_A_1_P_0 == (x_55_A_0_P_0 / x_7_A_0_P_0) * (1 + eps_18), Abs(eps_18) <= mantisse)
	#21.99999999999999 = 0.0 / 0.0
	x_0_A_2_P_0 = Real('x_0_A_2_P_0')
	s.add (x_0_A_2_P_0 == 2.0)
	eps_19 = Real('eps_19')
	s.add (x_0_A_2_P_0 == (x_54_A_0_P_0 + x_53_A_0_P_0) * (1 + eps_19), Abs(eps_19) <= mantisse)
	#Cancellation
	#2.0 = 2.0 + 0.0
	eps_20 = Real('eps_20')
	s.add (x_12_A_1_P_0 == (x_53_A_0_P_0 / x_6_A_0_P_0) * (1 + eps_20), Abs(eps_20) <= mantisse)
	#21.99999999999999 = 0.0 / 0.0
	x_9_A_2_P_0 = Real('x_9_A_2_P_0')
	s.add (x_9_A_2_P_0 == 5.333333333333333)
	eps_21 = Real('eps_21')
	s.add (x_9_A_2_P_0 == (x_52_A_0_P_0 + x_51_A_0_P_0) * (1 + eps_21), Abs(eps_21) <= mantisse)
	#5.333333333333333 = -2.0 + 7.333333333333333
	eps_22 = Real('eps_22')
	s.add (x_12_A_1_P_0 == (x_51_A_0_P_0 / x_11_A_1_P_0) * (1 + eps_22), Abs(eps_22) <= mantisse)
	#21.999999999999986 = 7.333333333333333 / 0.33333333333333354
	x_12_A_2_P_0 = Real('x_12_A_2_P_0')
	s.add (x_12_A_2_P_0 == 0.3333333333333333)
	eps_23 = Real('eps_23')
	s.add (x_2_A_1_P_0 == (x_50_A_0_P_0 * x_8_A_1_P_0) * (1 + eps_23), Abs(eps_23) <= mantisse)
	#7.333333333333334 = 21.99999999999999 * 0.33333333333333354
	x_8_A_2_P_0 = Real('x_8_A_2_P_0')
	s.add (x_8_A_2_P_0 == 2.5)
	eps_24 = Real('eps_24')
	s.add (x_8_A_2_P_0 == (x_49_A_0_P_0 + x_48_A_0_P_0) * (1 + eps_24), Abs(eps_24) <= mantisse)
	#2.5 = 0.3333333333333335 + 2.1666666666666665
	eps_25 = Real('eps_25')
	s.add (x_12_A_2_P_0 == (x_48_A_0_P_0 / x_5_A_1_P_0) * (1 + eps_25), Abs(eps_25) <= mantisse)
	#0.33333333333333315 = 2.1666666666666665 / 6.500000000000003
	x_7_A_1_P_0 = Real('x_7_A_1_P_0')
	s.add (x_7_A_1_P_0 == 0.5)
	eps_26 = Real('eps_26')
	s.add (x_7_A_1_P_0 == (x_47_A_0_P_0 + x_46_A_0_P_0) * (1 + eps_26), Abs(eps_26) <= mantisse)
	#Cancellation
	#0.5 = 0.0 + 0.5
	eps_27 = Real('eps_27')
	s.add (x_12_A_2_P_0 == (x_46_A_0_P_0 / x_4_A_2_P_0) * (1 + eps_27), Abs(eps_27) <= mantisse)
	#0.3333333333333333 = 0.5 / 1.5
	x_6_A_1_P_0 = Real('x_6_A_1_P_0')
	s.add (x_6_A_1_P_0 == 0.0)
	eps_28 = Real('eps_28')
	s.add (x_6_A_1_P_0 == (x_45_A_0_P_0 + x_44_A_0_P_0) * (1 + eps_28), Abs(eps_28) <= mantisse)
	#Cancellation
	#0.0 = 0.0 + 0.0
	eps_29 = Real('eps_29')
	s.add (x_12_A_2_P_0 == (x_44_A_0_P_0 / x_3_A_1_P_0) * (1 + eps_29), Abs(eps_29) <= mantisse)
	#0.3333333333333333 = 0.0 / 0.0
	x_11_A_2_P_0 = Real('x_11_A_2_P_0')
	s.add (x_11_A_2_P_0 == 2.0)
	eps_30 = Real('eps_30')
	s.add (x_11_A_2_P_0 == (x_43_A_0_P_0 + x_42_A_0_P_0) * (1 + eps_30), Abs(eps_30) <= mantisse)
	#2.0 = 0.3333333333333335 + 1.6666666666666665
	eps_31 = Real('eps_31')
	s.add (x_12_A_2_P_0 == (x_42_A_0_P_0 / x_10_A_2_P_0) * (1 + eps_31), Abs(eps_31) <= mantisse)
	#0.3333333333333333 = 1.6666666666666665 / 5.0
	x_12_A_3_P_0 = Real('x_12_A_3_P_0')
	s.add (x_12_A_3_P_0 == -0.6666666666666666)
	eps_32 = Real('eps_32')
	s.add (x_7_A_1_P_0 == (x_41_A_0_P_0 * x_4_A_2_P_0) * (1 + eps_32), Abs(eps_32) <= mantisse)
	#0.5 = 0.3333333333333333 * 1.5
	x_2_A_2_P_0 = Real('x_2_A_2_P_0')
	s.add (x_2_A_2_P_0 == 3.0)
	eps_33 = Real('eps_33')
	s.add (x_2_A_2_P_0 == (x_40_A_0_P_0 + x_39_A_0_P_0) * (1 + eps_33), Abs(eps_33) <= mantisse)
	#3.0 = 7.333333333333333 + -4.333333333333333
	eps_34 = Real('eps_34')
	s.add (x_12_A_3_P_0 == (x_39_A_0_P_0 / x_5_A_1_P_0) * (1 + eps_34), Abs(eps_34) <= mantisse)
	#-0.6666666666666663 = -4.333333333333333 / 6.500000000000003
	x_1_A_2_P_0 = Real('x_1_A_2_P_0')
	s.add (x_1_A_2_P_0 == -1.0)
	eps_35 = Real('eps_35')
	s.add (x_1_A_2_P_0 == (x_38_A_0_P_0 + x_37_A_0_P_0) * (1 + eps_35), Abs(eps_35) <= mantisse)
	#Cancellation
	#-1.0 = 0.0 + -1.0
	eps_36 = Real('eps_36')
	s.add (x_12_A_3_P_0 == (x_37_A_0_P_0 / x_4_A_2_P_0) * (1 + eps_36), Abs(eps_36) <= mantisse)
	#-0.6666666666666666 = -1.0 / 1.5
	x_0_A_3_P_0 = Real('x_0_A_3_P_0')
	s.add (x_0_A_3_P_0 == 2.0)
	eps_37 = Real('eps_37')
	s.add (x_0_A_3_P_0 == (x_36_A_0_P_0 + x_35_A_0_P_0) * (1 + eps_37), Abs(eps_37) <= mantisse)
	#Cancellation
	#2.0 = 2.0 + -0.0
	eps_38 = Real('eps_38')
	s.add (x_12_A_3_P_0 == (x_35_A_0_P_0 / x_3_A_1_P_0) * (1 + eps_38), Abs(eps_38) <= mantisse)
	#-0.6666666666666666 = -0.0 / 0.0
	x_9_A_3_P_0 = Real('x_9_A_3_P_0')
	s.add (x_9_A_3_P_0 == 2.0)
	eps_39 = Real('eps_39')
	s.add (x_9_A_3_P_0 == (x_34_A_0_P_0 + x_33_A_0_P_0) * (1 + eps_39), Abs(eps_39) <= mantisse)
	#2.0 = 5.333333333333333 + -3.333333333333333
	eps_40 = Real('eps_40')
	s.add (x_12_A_3_P_0 == (x_33_A_0_P_0 / x_10_A_2_P_0) * (1 + eps_40), Abs(eps_40) <= mantisse)
	#-0.6666666666666666 = -3.333333333333333 / 5.0
	x_12_A_4_P_0 = Real('x_12_A_4_P_0')
	s.add (x_12_A_4_P_0 == -0.5)
	eps_41 = Real('eps_41')
	s.add (x_1_A_2_P_0 == (x_32_A_0_P_0 * x_4_A_2_P_0) * (1 + eps_41), Abs(eps_41) <= mantisse)
	#-1.0 = -0.6666666666666666 * 1.5
	x_5_A_1_P_1 = Real('x_5_A_1_P_1')
	x_8_A_2_P_1 = Real('x_8_A_2_P_1')
	s.add (x_5_A_1_P_1 == x_8_A_2_P_0)
	s.add (x_8_A_2_P_1 == x_5_A_1_P_0)
	x_4_A_2_P_1 = Real('x_4_A_2_P_1')
	x_7_A_1_P_1 = Real('x_7_A_1_P_1')
	s.add (x_4_A_2_P_1 == x_7_A_1_P_0)
	s.add (x_7_A_1_P_1 == x_4_A_2_P_0)
	x_3_A_1_P_1 = Real('x_3_A_1_P_1')
	x_6_A_1_P_1 = Real('x_6_A_1_P_1')
	s.add (x_3_A_1_P_1 == x_6_A_1_P_0)
	s.add (x_6_A_1_P_1 == x_3_A_1_P_0)
	x_10_A_2_P_1 = Real('x_10_A_2_P_1')
	x_11_A_2_P_1 = Real('x_11_A_2_P_1')
	s.add (x_10_A_2_P_1 == x_11_A_2_P_0)
	s.add (x_11_A_2_P_1 == x_10_A_2_P_0)
	x_8_A_3_P_1 = Real('x_8_A_3_P_1')
	s.add (x_8_A_3_P_1 == 5.0)
	eps_42 = Real('eps_42')
	s.add (x_8_A_3_P_1 == (x_31_A_0_P_0 + x_30_A_0_P_0) * (1 + eps_42), Abs(eps_42) <= mantisse)
	#5.0 = 6.5 + -1.5
	eps_43 = Real('eps_43')
	s.add (x_12_A_4_P_0 == (x_30_A_0_P_0 / x_2_A_2_P_0) * (1 + eps_43), Abs(eps_43) <= mantisse)
	#-0.5 = -1.5 / 3.0
	x_7_A_2_P_1 = Real('x_7_A_2_P_1')
	s.add (x_7_A_2_P_1 == 2.0)
	eps_44 = Real('eps_44')
	s.add (x_7_A_2_P_1 == (x_29_A_0_P_0 + x_28_A_0_P_0) * (1 + eps_44), Abs(eps_44) <= mantisse)
	#Cancellation
	#2.0 = 1.5 + 0.5
	eps_45 = Real('eps_45')
	s.add (x_12_A_4_P_0 == (x_28_A_0_P_0 / x_1_A_2_P_0) * (1 + eps_45), Abs(eps_45) <= mantisse)
	#-0.5000000000000001 = 0.5 / -0.9999999999999998
	x_6_A_2_P_1 = Real('x_6_A_2_P_1')
	s.add (x_6_A_2_P_1 == -1.0)
	eps_46 = Real('eps_46')
	s.add (x_6_A_2_P_1 == (x_27_A_0_P_0 + x_26_A_0_P_0) * (1 + eps_46), Abs(eps_46) <= mantisse)
	#Cancellation
	#-1.0 = 0.0 + -1.0
	eps_47 = Real('eps_47')
	s.add (x_12_A_4_P_0 == (x_26_A_0_P_0 / x_0_A_3_P_0) * (1 + eps_47), Abs(eps_47) <= mantisse)
	#-0.5 = -1.0 / 2.0
	x_11_A_3_P_1 = Real('x_11_A_3_P_1')
	s.add (x_11_A_3_P_1 == 4.0)
	eps_48 = Real('eps_48')
	s.add (x_11_A_3_P_1 == (x_25_A_0_P_0 + x_24_A_0_P_0) * (1 + eps_48), Abs(eps_48) <= mantisse)
	#4.0 = 5.0 + -1.0
	eps_49 = Real('eps_49')
	s.add (x_12_A_4_P_0 == (x_24_A_0_P_0 / x_9_A_3_P_0) * (1 + eps_49), Abs(eps_49) <= mantisse)
	#-0.5 = -1.0 / 2.0
	x_12_A_5_P_0 = Real('x_12_A_5_P_0')
	s.add (x_12_A_5_P_0 == -0.5)
	eps_50 = Real('eps_50')
	s.add (x_6_A_2_P_1 == (x_23_A_0_P_0 * x_0_A_3_P_0) * (1 + eps_50), Abs(eps_50) <= mantisse)
	#-1.0 = -0.5 * 2.0
	x_5_A_2_P_1 = Real('x_5_A_2_P_1')
	s.add (x_5_A_2_P_1 == 1.0)
	eps_51 = Real('eps_51')
	s.add (x_5_A_2_P_1 == (x_22_A_0_P_0 + x_21_A_0_P_0) * (1 + eps_51), Abs(eps_51) <= mantisse)
	#Cancellation
	#1.0 = 2.5 + -1.5
	eps_52 = Real('eps_52')
	s.add (x_12_A_5_P_0 == (x_21_A_0_P_0 / x_2_A_2_P_0) * (1 + eps_52), Abs(eps_52) <= mantisse)
	#-0.5 = -1.5 / 3.0
	x_4_A_3_P_1 = Real('x_4_A_3_P_1')
	s.add (x_4_A_3_P_1 == 1.0)
	eps_53 = Real('eps_53')
	s.add (x_4_A_3_P_1 == (x_20_A_0_P_0 + x_19_A_0_P_0) * (1 + eps_53), Abs(eps_53) <= mantisse)
	#1.0 = 0.5 + 0.5
	eps_54 = Real('eps_54')
	s.add (x_12_A_5_P_0 == (x_19_A_0_P_0 / x_1_A_2_P_0) * (1 + eps_54), Abs(eps_54) <= mantisse)
	#-0.5000000000000001 = 0.5 / -0.9999999999999998
	x_3_A_2_P_1 = Real('x_3_A_2_P_1')
	s.add (x_3_A_2_P_1 == -1.0)
	eps_55 = Real('eps_55')
	s.add (x_3_A_2_P_1 == (x_18_A_0_P_0 + x_17_A_0_P_0) * (1 + eps_55), Abs(eps_55) <= mantisse)
	#-1.0 = 0.0 + -1.0
	eps_56 = Real('eps_56')
	s.add (x_12_A_5_P_0 == (x_17_A_0_P_0 / x_0_A_3_P_0) * (1 + eps_56), Abs(eps_56) <= mantisse)
	#-0.5 = -1.0 / 2.0
	x_10_A_3_P_1 = Real('x_10_A_3_P_1')
	s.add (x_10_A_3_P_1 == 1.0)
	eps_57 = Real('eps_57')
	s.add (x_10_A_3_P_1 == (x_16_A_0_P_0 + x_15_A_0_P_0) * (1 + eps_57), Abs(eps_57) <= mantisse)
	#1.0 = 2.0 + -1.0
	eps_58 = Real('eps_58')
	s.add (x_12_A_5_P_0 == (x_15_A_0_P_0 / x_9_A_3_P_0) * (1 + eps_58), Abs(eps_58) <= mantisse)
	#-0.5 = -1.0 / 2.0
	x_12_A_6_P_0 = Real('x_12_A_6_P_0')
	s.add (x_12_A_6_P_0 == 0.0)
	eps_59 = Real('eps_59')
	s.add (x_3_A_2_P_1 == (x_14_A_0_P_0 * x_0_A_3_P_0) * (1 + eps_59), Abs(eps_59) <= mantisse)
	#-1.0 = -0.5 * 2.0
	x_2_A_2_P_1 = Real('x_2_A_2_P_1')
	x_5_A_2_P_2 = Real('x_5_A_2_P_2')
	s.add (x_2_A_2_P_1 == x_5_A_2_P_1)
	s.add (x_5_A_2_P_2 == x_2_A_2_P_0)
	x_1_A_2_P_1 = Real('x_1_A_2_P_1')
	x_4_A_3_P_2 = Real('x_4_A_3_P_2')
	s.add (x_1_A_2_P_1 == x_4_A_3_P_1)
	s.add (x_4_A_3_P_2 == x_1_A_2_P_0)
	x_0_A_3_P_1 = Real('x_0_A_3_P_1')
	x_3_A_2_P_2 = Real('x_3_A_2_P_2')
	s.add (x_0_A_3_P_1 == x_3_A_2_P_1)
	s.add (x_3_A_2_P_2 == x_0_A_3_P_0)
	x_9_A_3_P_1 = Real('x_9_A_3_P_1')
	x_10_A_3_P_2 = Real('x_10_A_3_P_2')
	s.add (x_9_A_3_P_1 == x_10_A_3_P_1)
	s.add (x_10_A_3_P_2 == x_9_A_3_P_0)
	"""if(nbAppel == 0):
		c_0 = Real('c_0')
		s.add(Abs(x_0_A_3_P_1 - c_0) < 10**-5, x_0_A_3_P_1 != c_0)
		c_1 = Real('c_1')
		s.add(Abs(x_1_A_2_P_1 - c_1) < 10**-6, x_1_A_2_P_1 != c_1)
		c_7 = Real('c_7')
		s.add(Abs(x_7_A_2_P_1 - c_7) < 10**-3, x_7_A_2_P_1 != c_7)
		c_6 = Real('c_6')
		s.add(Abs(x_6_A_2_P_1 - c_6) < 10**-8, x_6_A_2_P_1 != c_6)
		c_5 = Real('c_5')
		s.add(Abs(x_5_A_2_P_2 - c_5) < 10**2, x_5_A_2_P_2 != c_5)
	else:
		nbAff0 = 3
		nbPer0 = 1
		c_0 = Real('c_0')
		nbAff1 = 2
		nbPer1 = 1
		c_1 = Real('c_1')
		nbAff7 = 2
		nbPer7 = 1
		c_7 = Real('c_7')
		nbAff6 = 2
		nbPer6 = 1
		c_6 = Real('c_6')
		nbAff5 = 2
		nbPer5 = 2
		c_5 = Real('c_5')
		for i in range(len(liste)):
			index = int (liste[i][0])
			s.add (Abs(locals()["x_"+str(index)+"_A_"+str(locals()["nbAff"+str(index)])+"_P_"+str(locals()["nbPer"+str(index)])] - locals()["c_"+str(index)]) < string_pow(liste[i][2]))
			s.add (locals()["x_"+str(index)+"_A_"+str(locals()["nbAff"+str(index)])+"_P_"+str(locals()["nbPer"+str(index)])] !=  locals()["c_"+str(id)])
	"""
	c = s.check()
	if ((c == unsat) or (c == unknown)):
		if(len(liste) == 1):
			print (c)
			return
		f = int(len(liste) / 2)
		ddebug(liste[:f], 1)
		ddebug(liste[f+1:], 1)
	elif(c == sat):
		print (c)
		m = s.model ()
		print("Element N°(0): ", m[x_0_A_3_P_1])
		print("Element N°(1): ", m[x_1_A_2_P_1])
		print("Element N°(2): ", m[x_2_A_2_P_1])
		print("Element N°(3): ", m[x_3_A_2_P_2])
		print("Element N°(4): ", m[x_4_A_3_P_2])
		print("Element N°(5): ", m[x_5_A_2_P_2])
		print("Element N°(6): ", m[x_6_A_2_P_1])
		print("Element N°(7): ", m[x_7_A_2_P_1])
		print("Element N°(8): ", m[x_8_A_3_P_1])
		print("Element N°(9): ", m[x_9_A_3_P_1])
		print("Element N°(10): ", m[x_10_A_3_P_2])
		print("Element N°(11): ", m[x_11_A_3_P_1])
		#print("\nContraintes acceptables:\n",liste)
		return 
	elif(len(liste) == 0):
		return 0
	i += 1


def solver():
	print("(+) Ce programme contient 74 variables.")
	sleep(1.75)
	print("(+) La résolution de ce système est estimée à: 0.0 h 0.0 mn 1 sec ")
	sleep(1)
	reponse = input("(+) Voulez-vous continuer le processus? (Y/n): ")
	if (reponse == "n"):
		exit()
	ddebug(func_getResult("ref.txt"), 0)

solver()